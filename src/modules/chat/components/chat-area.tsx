"use client"
import { useState, useRef, useEffect } from "react"
import { Paperclip, Send } from "lucide-react"
import type { Agent, Message } from "@/modules/chat/types"
import { Button } from "@/shared/components/ui/button"
import { Input } from "@/shared/components/ui/input"
import { Card } from "@/shared/components/ui/card"
import { SidebarInset } from "@/shared/components/ui/sidebar"

interface ChatAreaProps {
  agent: Agent | null
}

export default function ChatArea({ agent }: ChatAreaProps) {
  const [input, setInput] = useState("")
  const [messages, setMessages] = useState<Message[]>(
    agent?.conversations.find((c) => c.id === agent.activeConversation)?.messages || [],
  )
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Update messages when agent changes
  useEffect(() => {
    if (agent) {
      const conversation = agent.conversations.find((c) => c.id === agent.activeConversation)
      setMessages(conversation?.messages || [])
    } else {
      setMessages([])
    }
  }, [agent])

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  const handleSendMessage = () => {
    if (!input.trim() || !agent) return

    // Add user message
    const userMessage: Message = {
      id: `msg-${Date.now()}`,
      content: input,
      sender: "user",
      timestamp: new Date().toISOString(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")

    // Regular message response
    setTimeout(() => {
      const aiMessage: Message = {
        id: `msg-${Date.now() + 1}`,
        content: `This is a dummy response from ${agent.name}. In a real application, this would be generated by an AI model.`,
        sender: "ai",
        timestamp: new Date().toISOString(),
      }

      setMessages((prev) => [...prev, aiMessage])
    }, 1000)
  }

  return (
    <SidebarInset>
      <div className="flex h-full flex-col">
        {agent ? (
          <>
            <header className="border-b py-3 px-4">
              <div className="mx-auto max-w-3xl">
                <h2 className="text-lg font-semibold">{agent.name}</h2>
              </div>
            </header>

            <div className="flex-1 overflow-y-auto p-4 min-h-[calc(100vh-12rem)]">
              <div className="mx-auto max-w-3xl space-y-4">
                {messages.length === 0 ? (
                  <div className="flex h-full items-center justify-center">
                    <p className="text-muted-foreground">Nenhuma mensagem ainda. Inicie uma conversa!</p>
                  </div>
                ) : (
                  messages.map((message) => (
                    <div key={message.id}>
                      <Card
                        className={`p-3 max-w-[90%] ${
                          message.sender === "user" ? "ml-auto bg-primary text-primary-foreground" : "mr-auto bg-muted"
                        }`}
                      >
                        <p>{message.content}</p>
                        <p className="text-xs opacity-70 mt-1">{new Date(message.timestamp).toLocaleTimeString()}</p>
                      </Card>
                    </div>
                  ))
                )}
                <div ref={messagesEndRef} />
              </div>
            </div>

            <footer className="border-t py-2 px-4">
              <div className="mx-auto max-w-3xl">
                <form
                  className="flex gap-2"
                  onSubmit={(e) => {
                    e.preventDefault()
                    handleSendMessage()
                  }}
                >
                  <div className="flex gap-1">
                    <Button
                      type="button"
                      size="icon"
                      variant="ghost"
                      className="flex-shrink-0"
                      onClick={() => alert("Attachment functionality would go here")}
                    >
                      <Paperclip className="h-4 w-4" />
                    </Button>
                  </div>
                  <Input
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Type your message..."
                    className="flex-1"
                  />
                  <Button type="submit" size="icon">
                    <Send className="h-4 w-4" />
                  </Button>
                </form>
              </div>
            </footer>
          </>
        ) : (
          <div className="flex h-full items-center justify-center">
            <div className="text-center">
              <h2 className="text-xl font-semibold">Selecione um agente</h2>
              <p className="text-muted-foreground">Escolha um agente de IA da barra lateral para come√ßar a conversar</p>
            </div>
          </div>
        )}
      </div>
    </SidebarInset>
  )
}
